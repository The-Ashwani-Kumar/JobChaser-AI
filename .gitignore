# Ignore node_modules in all directories
**/node_modules/

# Ignore .env files
.env
.env.*

# Ignore log files
*.log

# Ignore macOS system files
.DS_Store

# Ignore VS Code settings folder
.vscode/

# Ignore coverage folder (for testing frameworks)
coverage/

# Ignore build output directories (like dist, build)
dist/
build/

# Ignore Docker files if needed (e.g., for sensitive data in Dockerfile)
docker-compose.override.yml
Dockerfile

# Ignore npm debug log files
npm-debug.log
yarn-debug.log
yarn-error.log

# Ignore .idea (JetBrains IDEs)
.idea/

# Ignore all IDE and editor-specific files
*.sublime-project
*.sublime-workspace
*.vscode

# Ignore operating system-specific files
Thumbs.db


# **/node_modules/: This will ignore the node_modules folder in all directories, no matter how deep the folder is.

# .env and .env.*: This will ignore .env files, which often contain sensitive data like API keys or environment variables.

# *.log: Ignores all .log files, which are usually used for logging errors or system outputs.

# .DS_Store: This file is automatically created by macOS and can be safely ignored.

# .vscode/: Ignores VS Code-specific settings, which may not be necessary to share with others.

# coverage/: If you're using a testing framework like Jest or Mocha, it may generate a coverage folder that you donâ€™t need to track.

# dist/ and build/: These are typical directories where build output is stored.

# docker-compose.override.yml and Dockerfile: Optional, but you may want to ignore specific Docker files depending on your setup.

# npm-debug.log, yarn-debug.log, etc.: These files are generated by npm or yarn and can be ignored.